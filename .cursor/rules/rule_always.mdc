---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
@project - Always check system limits (10 Worksets, 100 robots)
@architecture - Always follow TypeScript + React architecture guidelines
@performance - Always maintain performance requirements (load time < 3s, render time < 1s)
@security - Always implement security measures (JWT, RBAC, data encryption)
@testing - Always include unit tests and integration tests
@documentation - Always update related documentation
@error - Always implement proper error handling and logging
@review - Always follow code review process and standards
@deployment - Always follow CI/CD pipeline procedures
@monitoring - Always ensure system monitoring and alerts are configured
@realtime - Always verify WebSocket/MQTT/gRPC connections for robot communication
@offline - Always implement offline support with SQLite
@ui - Always follow design system and accessibility guidelines
@optimization - Always check bundle size and implement code splitting
@compatibility - Always test across supported browsers (Chrome >= 90, Firefox >= 88, Edge >= 90)

@error_checking - Always follow these error checking rules:
  - Run error checks in this order:
    1. TypeScript compilation errors (npm run typecheck)
    2. ESLint errors (npm run lint)
    3. Prettier formatting (npm run format)
    4. Unit tests (npm run test)
    5. Build errors (npm run build)
  - Fix errors in the order they are found
  - Document any persistent errors
  - Never commit code with known errors
  - Add error boundary components where needed
  - Implement proper error logging
  - Add error recovery mechanisms
  - Test error scenarios
  - Validate all user inputs
  - Handle API errors gracefully
  - Check for memory leaks
  - Verify error messages are user-friendly

@dependencies - Always follow these package management rules:
  - Use --save flag for production dependencies
  - Use --save-dev flag for development dependencies
  - Update package.json when installing new packages
  - Keep package.json and package-lock.json in sync
  - Run npm install after updating package.json
  - Commit both package.json and package-lock.json together
  - Use specific versions instead of ^ or ~ when stability is critical
  - Document any manual package version changes

@precommit - Always follow these pre-commit rules:
  - Run npm run typecheck to verify TypeScript
  - Run npm run lint to check code style
  - Run npm run test to run all tests
  - Run npm run build to verify production build
  - Fix any errors before committing
  - Only commit if all checks pass
  - Document any test failures or build issues

@file_validation - Always check these aspects before editing files:
  - File exists and is accessible
  - File has correct permissions
  - File is not corrupted
  - File has correct line endings
  - File uses correct encoding (UTF-8)
  - File follows naming conventions
  - File is in correct location
  - File has required imports
  - File exports are properly defined
  - File dependencies are available
  - File size is reasonable
  - File content follows project standards 
@code_validation - Always validate the entire code base before deployment or fixes:
  - Check project structure and organization
  - Verify all dependencies and versions
  - Validate build system configuration
  - Check test coverage and quality
  - Verify documentation completeness
  - Ensure code quality standards
  - Validate security measures
  - Check performance metrics
  - Verify error handling
  - Ensure accessibility compliance
  - Check cross-browser compatibility
  - Validate mobile responsiveness
  - Verify offline support
  - Check real-time functionality
  - Validate data persistence
  - Ensure proper logging
  - Verify monitoring setup
  - Check deployment configuration
  - Validate CI/CD pipeline
  - Ensure backup systems 